{"ast":null,"code":"var _jsxFileName = \"D:\\\\Program Files (x86)\\\\GitHub\\\\MyCardGame\\\\webSocketsPrototype\\\\reack-client\\\\src\\\\components\\\\SearchingPage.tsx\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport SockJS from 'sockjs-client';\nimport { over } from 'stompjs';\nimport GamePage from './GamePage';\nimport { useDispatch } from 'react-redux';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar serverURL = 'http://localhost:8082';\nvar stompClient = null;\nvar gameID = \"\";\nconst SearchingPage = () => {\n  _s();\n  const [userName, setUserName] = useState(\"\");\n  const [isConnected, setIsConnected] = useState(false);\n  const [isEnemyFound, setIsEnemyFound] = useState(false);\n  const [points, setPoints] = useState(0);\n  const [enemyPoints, setEnemyPoints] = useState(0);\n  const reduxUserName = useSelector(state => state);\n  const dispatch = useDispatch();\n  const connectToServer = () => {\n    dispatch({\n      type: \"ADD_NOTE\",\n      payload: userName\n    });\n    let Sock = new SockJS(serverURL + '/ws');\n    stompClient = over(Sock);\n    stompClient.connect({}, onConnected);\n  };\n  const onConnected = () => {\n    setIsConnected(true);\n    stompClient.subscribe('/user/' + userName + '/private', onMessageReceived);\n  };\n  const onMessageReceived = payload => {\n    if (payload.body.includes(\"Found enemy\")) {\n      gameID = payload.body.split(\":\")[1];\n      let message = userName + \":\" + gameID;\n      setIsEnemyFound(true);\n      fetch(serverURL + '/button', {\n        method: 'PUT',\n        headers: {\n          'Content-Type': 'text/plain'\n        },\n        body: message\n      });\n    } else if (payload.body.includes(\"Get data from server\")) {\n      let enemyName = payload.body.split(\":\")[1];\n      fetch(serverURL + `/button/getPoints/${enemyName}/${gameID}`).then(res => res.json()).then(data => {\n        setEnemyPoints(data);\n      }).catch(console.error);\n    }\n  };\n  const startSearching = () => {\n    stompClient.send('/app/findEnemy', {}, userName);\n  };\n  const increase = () => {\n    let message = userName + \":\" + gameID;\n    fetch(serverURL + '/button', {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'text/plain'\n      },\n      body: message\n    });\n    fetch(serverURL + `/button/getPoints/${userName}/${gameID}`).then(res => res.json()).then(data => {\n      setPoints(data);\n    }).catch(console.error);\n    stompClient.send('/app/sendToEnemy', {}, userName);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: isEnemyFound ? /*#__PURE__*/_jsxDEV(\"div\", {\n      children: /*#__PURE__*/_jsxDEV(GamePage, {\n        userName: userName,\n        gameID: gameID,\n        serverURL: serverURL\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 97,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 96,\n      columnNumber: 7\n    }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [!isConnected ? /*#__PURE__*/_jsxDEV(\"div\", {\n        children: \"connect to search\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 101,\n        columnNumber: 22\n      }, this) : /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: startSearching,\n        children: \"search for opponent\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 101,\n        columnNumber: 52\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        children: isConnected ? /*#__PURE__*/_jsxDEV(\"div\", {\n          children: \" \"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 103,\n          columnNumber: 23\n        }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n          children: [/*#__PURE__*/_jsxDEV(\"input\", {\n            id: \"user-name\",\n            placeholder: \"enter user name\",\n            value: userName,\n            name: \"username\",\n            onChange: event => {\n              setUserName(event.target.value);\n            }\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 105,\n            columnNumber: 10\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: connectToServer,\n            children: \"connect to server\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 106,\n            columnNumber: 10\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 104,\n          columnNumber: 9\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 102,\n        columnNumber: 7\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 100,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 94,\n    columnNumber: 5\n  }, this);\n};\n_s(SearchingPage, \"K4QbG/Rap5/ii2SqwbphNdyLC3w=\", true, function () {\n  return [useDispatch];\n});\n_c = SearchingPage;\nexport default SearchingPage;\nvar _c;\n$RefreshReg$(_c, \"SearchingPage\");","map":{"version":3,"names":["React","useState","SockJS","over","GamePage","useDispatch","jsxDEV","_jsxDEV","serverURL","stompClient","gameID","SearchingPage","_s","userName","setUserName","isConnected","setIsConnected","isEnemyFound","setIsEnemyFound","points","setPoints","enemyPoints","setEnemyPoints","reduxUserName","useSelector","state","dispatch","connectToServer","type","payload","Sock","connect","onConnected","subscribe","onMessageReceived","body","includes","split","message","fetch","method","headers","enemyName","then","res","json","data","catch","console","error","startSearching","send","increase","className","children","fileName","_jsxFileName","lineNumber","columnNumber","onClick","id","placeholder","value","name","onChange","event","target","_c","$RefreshReg$"],"sources":["D:/Program Files (x86)/GitHub/MyCardGame/webSocketsPrototype/reack-client/src/components/SearchingPage.tsx"],"sourcesContent":["import React, {useState} from 'react';\r\nimport SockJS from 'sockjs-client';\r\nimport {over} from 'stompjs';\r\nimport GamePage from './GamePage';\r\nimport {useDispatch} from 'react-redux';\r\n\r\n\r\n\r\n\r\n\r\ninterface message {\r\n  receiver:string;\r\n  sender:string;\r\n  message:string;\r\n}\r\n\r\n\r\nvar serverURL: string = 'http://localhost:8082';\r\nvar stompClient: any = null;\r\nvar gameID:string= \"\";\r\nconst SearchingPage = () => {\r\n    const [userName, setUserName] = useState<string>(\"\");\r\n    const [isConnected, setIsConnected] = useState<boolean>(false);\r\n    const [isEnemyFound, setIsEnemyFound] = useState<boolean>(false);\r\n    const [points, setPoints] = useState<number>(0);\r\n    const [enemyPoints, setEnemyPoints] = useState<number>(0);\r\n\r\n    const reduxUserName = useSelector<string, string>((state) =>state);\r\n\r\n\r\n    const dispatch = useDispatch();\r\n\r\n\r\n\r\n  const connectToServer= () => {\r\n    dispatch({type:\"ADD_NOTE\", payload: userName});\r\n    let Sock=new SockJS(serverURL + '/ws');\r\n    stompClient = over(Sock);\r\n    stompClient.connect({}, onConnected);\r\n\r\n  }\r\n  const onConnected = () => {\r\n    setIsConnected(true);\r\n    stompClient.subscribe('/user/' + userName + '/private', onMessageReceived);\r\n\r\n  }\r\n\r\n  const onMessageReceived = (payload:any) => {\r\n\r\n    if(payload.body.includes(\"Found enemy\") ) {\r\n\r\n      gameID = payload.body.split(\":\")[1]; \r\n      let message:string = userName + \":\" + gameID;\r\n      setIsEnemyFound(true);\r\n      fetch(serverURL + '/button', {\r\n        method: 'PUT',\r\n        headers: {'Content-Type': 'text/plain',},\r\n        body: message,\r\n      });\r\n    }\r\n    else if(payload.body.includes(\"Get data from server\")) {\r\n      let enemyName = payload.body.split(\":\")[1]; \r\n      fetch(serverURL + `/button/getPoints/${enemyName}/${gameID}`)\r\n      .then((res) => res.json())\r\n      .then((data:number ) => {\r\n        setEnemyPoints(data);\r\n      }).catch(console.error);\r\n    }\r\n  }\r\n\r\n\r\n  const startSearching = () => {\r\n    stompClient.send('/app/findEnemy', {}, userName);\r\n  }\r\n\r\n  const increase = () => {\r\n\r\n      let message:string = userName + \":\" + gameID;\r\n      fetch(serverURL + '/button', {\r\n        method: 'POST',\r\n        headers: {'Content-Type': 'text/plain',},\r\n        body: message,\r\n      });\r\n      fetch(serverURL + `/button/getPoints/${userName}/${gameID}`)\r\n      .then((res) => res.json())\r\n      .then((data:number ) => {\r\n        setPoints(data);\r\n      }).catch(console.error);\r\n      stompClient.send('/app/sendToEnemy', {}, userName);\r\n\r\n  }\r\n\r\n  return (\r\n    <div className=\"App\">\r\n      {isEnemyFound?\r\n      <div>\r\n        <GamePage userName={userName}  gameID={gameID} serverURL={serverURL}></GamePage>\r\n      </div>\r\n      :\r\n      <div>\r\n      {!isConnected? <div>connect to search</div>: <button onClick={startSearching}>search for opponent</button>}\r\n      <div>\r\n        {isConnected? <div> </div>:\r\n        <div>\r\n         <input id='user-name' placeholder='enter user name' value={userName} name='username' onChange={(event:any) => {setUserName(event.target.value)}}/>\r\n         <button onClick={connectToServer}>connect to server</button>\r\n        </div>\r\n        }\r\n      </div>\r\n\r\n      </div>\r\n      }\r\n\r\n\r\n    </div>\r\n  );\r\n}\r\n\r\n\r\nexport default SearchingPage\r\n\r\n\r\n\r\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAGC,QAAQ,QAAO,OAAO;AACrC,OAAOC,MAAM,MAAM,eAAe;AAClC,SAAQC,IAAI,QAAO,SAAS;AAC5B,OAAOC,QAAQ,MAAM,YAAY;AACjC,SAAQC,WAAW,QAAO,aAAa;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAaxC,IAAIC,SAAiB,GAAG,uBAAuB;AAC/C,IAAIC,WAAgB,GAAG,IAAI;AAC3B,IAAIC,MAAa,GAAE,EAAE;AACrB,MAAMC,aAAa,GAAGA,CAAA,KAAM;EAAAC,EAAA;EACxB,MAAM,CAACC,QAAQ,EAAEC,WAAW,CAAC,GAAGb,QAAQ,CAAS,EAAE,CAAC;EACpD,MAAM,CAACc,WAAW,EAAEC,cAAc,CAAC,GAAGf,QAAQ,CAAU,KAAK,CAAC;EAC9D,MAAM,CAACgB,YAAY,EAAEC,eAAe,CAAC,GAAGjB,QAAQ,CAAU,KAAK,CAAC;EAChE,MAAM,CAACkB,MAAM,EAAEC,SAAS,CAAC,GAAGnB,QAAQ,CAAS,CAAC,CAAC;EAC/C,MAAM,CAACoB,WAAW,EAAEC,cAAc,CAAC,GAAGrB,QAAQ,CAAS,CAAC,CAAC;EAEzD,MAAMsB,aAAa,GAAGC,WAAW,CAAkBC,KAAK,IAAIA,KAAK,CAAC;EAGlE,MAAMC,QAAQ,GAAGrB,WAAW,CAAC,CAAC;EAIhC,MAAMsB,eAAe,GAAEA,CAAA,KAAM;IAC3BD,QAAQ,CAAC;MAACE,IAAI,EAAC,UAAU;MAAEC,OAAO,EAAEhB;IAAQ,CAAC,CAAC;IAC9C,IAAIiB,IAAI,GAAC,IAAI5B,MAAM,CAACM,SAAS,GAAG,KAAK,CAAC;IACtCC,WAAW,GAAGN,IAAI,CAAC2B,IAAI,CAAC;IACxBrB,WAAW,CAACsB,OAAO,CAAC,CAAC,CAAC,EAAEC,WAAW,CAAC;EAEtC,CAAC;EACD,MAAMA,WAAW,GAAGA,CAAA,KAAM;IACxBhB,cAAc,CAAC,IAAI,CAAC;IACpBP,WAAW,CAACwB,SAAS,CAAC,QAAQ,GAAGpB,QAAQ,GAAG,UAAU,EAAEqB,iBAAiB,CAAC;EAE5E,CAAC;EAED,MAAMA,iBAAiB,GAAIL,OAAW,IAAK;IAEzC,IAAGA,OAAO,CAACM,IAAI,CAACC,QAAQ,CAAC,aAAa,CAAC,EAAG;MAExC1B,MAAM,GAAGmB,OAAO,CAACM,IAAI,CAACE,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;MACnC,IAAIC,OAAc,GAAGzB,QAAQ,GAAG,GAAG,GAAGH,MAAM;MAC5CQ,eAAe,CAAC,IAAI,CAAC;MACrBqB,KAAK,CAAC/B,SAAS,GAAG,SAAS,EAAE;QAC3BgC,MAAM,EAAE,KAAK;QACbC,OAAO,EAAE;UAAC,cAAc,EAAE;QAAa,CAAC;QACxCN,IAAI,EAAEG;MACR,CAAC,CAAC;IACJ,CAAC,MACI,IAAGT,OAAO,CAACM,IAAI,CAACC,QAAQ,CAAC,sBAAsB,CAAC,EAAE;MACrD,IAAIM,SAAS,GAAGb,OAAO,CAACM,IAAI,CAACE,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;MAC1CE,KAAK,CAAC/B,SAAS,GAAI,qBAAoBkC,SAAU,IAAGhC,MAAO,EAAC,CAAC,CAC5DiC,IAAI,CAAEC,GAAG,IAAKA,GAAG,CAACC,IAAI,CAAC,CAAC,CAAC,CACzBF,IAAI,CAAEG,IAAW,IAAM;QACtBxB,cAAc,CAACwB,IAAI,CAAC;MACtB,CAAC,CAAC,CAACC,KAAK,CAACC,OAAO,CAACC,KAAK,CAAC;IACzB;EACF,CAAC;EAGD,MAAMC,cAAc,GAAGA,CAAA,KAAM;IAC3BzC,WAAW,CAAC0C,IAAI,CAAC,gBAAgB,EAAE,CAAC,CAAC,EAAEtC,QAAQ,CAAC;EAClD,CAAC;EAED,MAAMuC,QAAQ,GAAGA,CAAA,KAAM;IAEnB,IAAId,OAAc,GAAGzB,QAAQ,GAAG,GAAG,GAAGH,MAAM;IAC5C6B,KAAK,CAAC/B,SAAS,GAAG,SAAS,EAAE;MAC3BgC,MAAM,EAAE,MAAM;MACdC,OAAO,EAAE;QAAC,cAAc,EAAE;MAAa,CAAC;MACxCN,IAAI,EAAEG;IACR,CAAC,CAAC;IACFC,KAAK,CAAC/B,SAAS,GAAI,qBAAoBK,QAAS,IAAGH,MAAO,EAAC,CAAC,CAC3DiC,IAAI,CAAEC,GAAG,IAAKA,GAAG,CAACC,IAAI,CAAC,CAAC,CAAC,CACzBF,IAAI,CAAEG,IAAW,IAAM;MACtB1B,SAAS,CAAC0B,IAAI,CAAC;IACjB,CAAC,CAAC,CAACC,KAAK,CAACC,OAAO,CAACC,KAAK,CAAC;IACvBxC,WAAW,CAAC0C,IAAI,CAAC,kBAAkB,EAAE,CAAC,CAAC,EAAEtC,QAAQ,CAAC;EAEtD,CAAC;EAED,oBACEN,OAAA;IAAK8C,SAAS,EAAC,KAAK;IAAAC,QAAA,EACjBrC,YAAY,gBACbV,OAAA;MAAA+C,QAAA,eACE/C,OAAA,CAACH,QAAQ;QAACS,QAAQ,EAAEA,QAAS;QAAEH,MAAM,EAAEA,MAAO;QAACF,SAAS,EAAEA;MAAU;QAAA+C,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAW;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAC7E,CAAC,gBAENnD,OAAA;MAAA+C,QAAA,GACC,CAACvC,WAAW,gBAAER,OAAA;QAAA+C,QAAA,EAAK;MAAiB;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAK,CAAC,gBAAEnD,OAAA;QAAQoD,OAAO,EAAET,cAAe;QAAAI,QAAA,EAAC;MAAmB;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAQ,CAAC,eAC1GnD,OAAA;QAAA+C,QAAA,EACGvC,WAAW,gBAAER,OAAA;UAAA+C,QAAA,EAAK;QAAC;UAAAC,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAK,CAAC,gBAC1BnD,OAAA;UAAA+C,QAAA,gBACC/C,OAAA;YAAOqD,EAAE,EAAC,WAAW;YAACC,WAAW,EAAC,iBAAiB;YAACC,KAAK,EAAEjD,QAAS;YAACkD,IAAI,EAAC,UAAU;YAACC,QAAQ,EAAGC,KAAS,IAAK;cAACnD,WAAW,CAACmD,KAAK,CAACC,MAAM,CAACJ,KAAK,CAAC;YAAA;UAAE;YAAAP,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAC,CAAC,eAClJnD,OAAA;YAAQoD,OAAO,EAAEhC,eAAgB;YAAA2B,QAAA,EAAC;UAAiB;YAAAC,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAQ,CAAC;QAAA;UAAAH,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OACxD;MAAC;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAEH,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAED;EAAC;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAIH,CAAC;AAEV,CAAC;AAAA9C,EAAA,CAhGKD,aAAa;EAAA,QAUEN,WAAW;AAAA;AAAA8D,EAAA,GAV1BxD,aAAa;AAmGnB,eAAeA,aAAa;AAAA,IAAAwD,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}